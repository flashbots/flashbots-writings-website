"use strict";(self.webpackChunkwrittings_website=self.webpackChunkwrittings_website||[]).push([[5847],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=i.createContext({}),u=function(e){var t=i.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return i.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(a),h=n,m=p["".concat(o,".").concat(h)]||p[h]||d[h]||r;return a?i.createElement(m,l(l({ref:t},c),{},{components:a})):i.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:n,l[1]=s;for(var u=2;u<r;u++)l[u]=a[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}h.displayName="MDXCreateElement"},6308:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var i=a(7462),n=(a(7294),a(3905));const r={slug:"block-building-inside-sgx",title:"Block Building inside SGX",authors:["metachris","frieder"],tags:["privacy","sgx"],image:"/img/posts/sgx-og.jpg",hide_table_of_contents:!1,description:"We are excited to announce that Flashbots is running a block builder inside an SGX enclave, and open-sourcing all the components."},l=void 0,s={permalink:"/block-building-inside-sgx",source:"@site/content/2023-03-03-sgx-block-building.mdx",title:"Block Building inside SGX",description:"We are excited to announce that Flashbots is running a block builder inside an SGX enclave, and open-sourcing all the components.",date:"2023-03-03T00:00:00.000Z",formattedDate:"March 3, 2023",tags:[{label:"privacy",permalink:"/tags/privacy"},{label:"sgx",permalink:"/tags/sgx"}],readingTime:6.155,truncated:!0,authors:[{name:"Chris Hager",title:"Tech Lead @Flashbots",url:"https://twitter.com/metachris/",imageURL:"https://pbs.twimg.com/profile_images/1371171321426624514/x3Pr9XJd_400x400.jpg",key:"metachris"},{name:"Frieder Paape",url:"https://www.linkedin.com/in/friederpaape",key:"frieder"}],nextItem:{title:"Backrunning Private Transactions Using Multi-Party Computation",permalink:"/backrunning-private-txs-MPC"}},o={authorsImageUrls:[void 0,void 0]},u=[{value:"Our Sepolia SGX Builder",id:"our-sepolia-sgx-builder",children:[]},{value:"Code &amp; Tooling",id:"code--tooling",children:[]},{value:"Hardware",id:"hardware",children:[]},{value:"Code Details",id:"code-details",children:[]},{value:"Challenges",id:"challenges",children:[{value:"Geth state size",id:"geth-state-size",children:[]},{value:"Merging performance and additional latencies",id:"merging-performance-and-additional-latencies",children:[]},{value:"Allowing public access to the builder &amp; preventing spam",id:"allowing-public-access-to-the-builder--preventing-spam",children:[]},{value:"Reproducible builds",id:"reproducible-builds",children:[]}]},{value:"Future Work",id:"future-work",children:[]},{value:"Thanks",id:"thanks",children:[]},{value:"References",id:"references",children:[]},{value:"Updates",id:"updates",children:[]}],c={toc:u};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"We are excited to announce that Flashbots is successfully running a block builder inside an SGX enclave, a trusted execution environment (TEE) developed by ",(0,n.kt)("a",{parentName:"p",href:"https://www.intel.com/content/www/us/en/architecture-and-technology/software-guard-extensions.html"},"Intel"),". The SGX block builder is now live on the Ethereum Sepolia testnet, and soon on mainnet!"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"SGX Builder Logo",src:a(8118).Z})),(0,n.kt)("p",null,"Our previous work on ",(0,n.kt)("a",{parentName:"p",href:"https://writings.flashbots.net/geth-inside-sgx"},"running Geth inside SGX")," demonstrated the technical feasibility of this approach. Now, we\u2019ve made the next step towards block building inside encrypted enclaves, and want to share our key learnings and challenges, as well as the all the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/flashbots/geth-sgx-gramine"},"code and tooling")," for running a block builder inside SGX."),(0,n.kt)("p",null,"Implementing block building inside encrypted enclaves brings us one step closer toward transaction confidentiality and decentralization of the block building role."),(0,n.kt)("p",null,"Running a block building algorithm inside an enclave ensures that block builders, as well other infrastructure providers, can no longer see the contents of user transactions,\nand run verifiable block construction algorithms on them, ensuring economically efficient blocks without compromising on user privacy."),(0,n.kt)("p",null,"Looking to the future, builders inside SGX can make blocks that are provably valid and truthfully report their bid size, possibly obviating the need for mev-boost relays."),(0,n.kt)("p",null,"Furthermore, it is an important step toward curbing the risks of exclusive orderflow by allowing transactions to be private yet accessible to all block builders operating inside enclaves."),(0,n.kt)("h2",{id:"our-sepolia-sgx-builder"},"Our Sepolia SGX Builder"),(0,n.kt)("p",null,"The Flashbots SGX builder on Sepolia uses the public key ",(0,n.kt)("inlineCode",{parentName:"p"},"0x9817fc7d...."),", and the block extra_data ",(0,n.kt)("inlineCode",{parentName:"p"},"Illuminate Dmocrtz Dstrib Prtct"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Delivered blocks can be found through the ",(0,n.kt)("a",{parentName:"li",href:"https://boost-relay-sepolia.flashbots.net/relay/v1/data/bidtraces/proposer_payload_delivered?builder_pubkey=0x9817fc7d5eb7ae1390f0fd64fd94a7d74c669c2fa5b5ef87605177329553853c957c11210537524a895e046d494491b7"},"relay data API")),(0,n.kt)("li",{parentName:"ul"},"Example block here: ",(0,n.kt)("a",{parentName:"li",href:"https://sepolia.etherscan.io/block/3013275"},"sepolia.etherscan.io/block/3013275"))),(0,n.kt)("h2",{id:"code--tooling"},"Code & Tooling"),(0,n.kt)("p",null,"The code and tooling required to run an SGX builder is available in this repository: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/flashbots/geth-sgx-gramine"},"github.com/flashbots/geth-sgx-gramine"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"See also the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine#builder-quickstart"},"builder quickstart in the README")),(0,n.kt)("li",{parentName:"ul"},"And an overview of all the changes in ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine/pull/9"},"the pull-request"))),(0,n.kt)("h2",{id:"hardware"},"Hardware"),(0,n.kt)("p",null,"We're using ",(0,n.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/virtual-machines/dcv3-series"},"Azure DCsv3 Series")," hardware, specifically:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"For Sepolia: ",(0,n.kt)("a",{parentName:"li",href:"https://azureprice.net/vm/Standard_DC2s_v3"},"Standard_DC2s_v3")," instances, with 2 cores and 16GB memory + 64GB SSD Swapfile."),(0,n.kt)("li",{parentName:"ul"},"For Mainnet: ",(0,n.kt)("a",{parentName:"li",href:"https://azureprice.net/vm/Standard_DC48s_v3"},"Standard_DC48s_v3")," instances, which have 48 Cores, 384GB Memory + 2TB Premium SSD Disk for Swap.")),(0,n.kt)("h2",{id:"code-details"},"Code Details"),(0,n.kt)("p",null,"The SGX builder release includes several improvements and additions to the original geth-inside-SGX codebase:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Fully working ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/builder"},"Flashbots block builder")," (branch ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/builder/tree/capella-test"},(0,n.kt)("inlineCode",{parentName:"a"},"capella-test")),")"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Trusted_Computing#Remote_attestation"},"Remote attestation")," support, allowing anyone to verify the SGX proof:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A remote-attestation TLS (RA-TLS) certificate is created on startup, which embeds the SGX attestation report."),(0,n.kt)("li",{parentName:"ul"},"See ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/CCC-Attestation/meetings/blob/main/materials/ShanweiCen_Interoperable_ATLS.pdf"},"here")," and ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/gramineproject/gramine/pull/1039"},"here")," for more information about RA-TLS, as well as the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine/pull/9/files#diff-c0fdcc479c0e7e75defff1b32dbc6d01e39a7d248d4dbcb6709220b85e68c88b"},"patch for adding it to the builder")," codebase."),(0,n.kt)("li",{parentName:"ul"},"RA-TLS is used by several SGX projects including Gramine, Open Enclave and Inclavare Containers."))),(0,n.kt)("li",{parentName:"ul"},"Support for ",(0,n.kt)("a",{parentName:"li",href:"https://gramine.readthedocs.io/en/stable/sgx-intro.html#term-edmm"},"EDMM")," (enclave dynamic memory management) via an update to ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/gramineproject/gramine/releases/tag/v1.4"},"Gramine 1.4"),". EDMM obviates the need to reserve and write all memory on startup, which has the potential to significantly speed up the startup process."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine#attest-enclave"},"Guide")," for attesting the certificate of an SGX builder"),(0,n.kt)("li",{parentName:"ul"},"Reproducible builder Docker image, arriving at a reproducible ",(0,n.kt)("a",{parentName:"li",href:"https://www.intel.com/content/www/us/en/developer/articles/technical/introduction-to-intel-sgx-sealing.html"},"MRENCLAVE")," value when rebuilding the builder Docker image.")),(0,n.kt)("h2",{id:"challenges"},"Challenges"),(0,n.kt)("h3",{id:"geth-state-size"},"Geth state size"),(0,n.kt)("p",null,"At the time of writing, the geth database requires about 1TB of storage."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The database needs to be encrypted and copied into the enclave on every startup. Given the full mainnet geth database with about one terabyte, the startup process takes about 4.5 hours."),(0,n.kt)("li",{parentName:"ul"},"This also means it takes a long time to reproduce bugs."),(0,n.kt)("li",{parentName:"ul"},"Gramine is crashing at 1TB of state in the enclave (we\u2019ve opened a ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/gramineproject/gramine/issues/1207"},"bug report"),")"),(0,n.kt)("li",{parentName:"ul"},"A promising direction is this ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ethereum/go-ethereum/pull/26274"},"geth PBSS patch")," (auto-pruning storage) which might be able to reduce the state size to about 150GB (see also ",(0,n.kt)("a",{parentName:"li",href:"https://nodereal.io/blog/en/geth-path-based-storage-model-and-newly-inline-state-prune/"},"this post")," for more details)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Edit:")," We ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine/pull/10"},"made it work")," by keeping the ancient database outside the enclave, halving the state required inside (to ~500GB).")),(0,n.kt)("h3",{id:"merging-performance-and-additional-latencies"},"Merging performance and additional latencies"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The SGX builder currently performs at around ~150 mgasps, which is about half the performance of a non-SGX builder.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},'mgasps means "Million Gas Per Second", measured whenever a new block is processed by geth, providing a good indicator for performance.'),(0,n.kt)("li",{parentName:"ul"},"Practically, this means that the SGX builder can only do half the simulations of a non-SGX builder running the same block construction algorithm."))),(0,n.kt)("li",{parentName:"ul"},"A likely culprit for this degradation is the way Golang handles syscalls. Instead of using the libc syscall interface, Golang calls directly into the kernel. This produces additional execution overhead when running inside an SGX enclave. Possible improvements could be made by building geth with ",(0,n.kt)("a",{parentName:"li",href:"https://go.dev/doc/install/gccgo"},"gccgo"))),(0,n.kt)("h3",{id:"allowing-public-access-to-the-builder--preventing-spam"},"Allowing public access to the builder & preventing spam"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Public users want to connect directly to the code inside the enclave (via TLS), to be able to verify the system is running inside SGX and the code is exactly what they expect."),(0,n.kt)("li",{parentName:"ul"},"This also means the request content cannot be inspected by any part of the outside infrastructure, which would simplify TLS termination, rate-limiting, spam prevention, load-balancing and reputation management."),(0,n.kt)("li",{parentName:"ul"},"In the current single-SGX-instance setup, the single builder instance would receive all the user connections, terminate the SSL connections, and process the request. However, the builder wants to focus on building, not on terminating TLS connections or dealing with spam."),(0,n.kt)("li",{parentName:"ul"},"A stopgap solution that\u2019s still permissionless could be applying heavy network-based rate-limiting."),(0,n.kt)("li",{parentName:"ul"},"In order to achieve a scalable SGX infrastructure, we\u2019ll publicly explore architectures for end-to-end SGX designs that can deal with outside requests in a scalable fashion, and prevent spam through pre-simulation.")),(0,n.kt)("h3",{id:"reproducible-builds"},"Reproducible builds"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"We achieved reproducible SGX-builds for the builder application itself, but the Gramine base as well as certain system libraries aren\u2019t yet reproducible and the upstream releases need to be trusted. We are working with the teams towards for end-to-end reproducible builds."),(0,n.kt)("li",{parentName:"ul"},"More information on reproducible Gramine builds are ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/gramineproject/gramine/issues/153"},"here")," and ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine/issues/4"},"here"),").")),(0,n.kt)("h2",{id:"future-work"},"Future Work"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Running a SGX builder on Mainnet (soon\u2122\ufe0f)."),(0,n.kt)("li",{parentName:"ul"},"Allowing users to submit bundles directly to the SGX builder."),(0,n.kt)("li",{parentName:"ul"},"Exploring designs for a scalable SGX infrastructure in public, potentially paving the way for ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/mev-boost/issues/139"},"distributed building designs"),"."),(0,n.kt)("li",{parentName:"ul"},"End-to-end reproducible builds."),(0,n.kt)("li",{parentName:"ul"},"Performance improvements, in particular around system startup and block merging."),(0,n.kt)("li",{parentName:"ul"},"Explore impact and mitigation of covert-channel attacks (leaking private information through resource usage patterns) as well as side-channel attacks and other vulnerabilities."),(0,n.kt)("li",{parentName:"ul"},"Mutual TLS & mutual attestation, allowing multiple SGX enclaves to establish a trusted connection by mutually verifying their SGX proofs."),(0,n.kt)("li",{parentName:"ul"},"SGX'izing further parts of the stack for e2e transaction confidentiality (i.e. mev-boost relay, searcher stack, bundle relay, ...)."),(0,n.kt)("li",{parentName:"ul"},"Exploring other TEE systems besides SGX (i.e. AMD SEV, ARM, Nvidia H100+ coprocessors, etc.)")),(0,n.kt)("h2",{id:"thanks"},"Thanks"),(0,n.kt)("p",null,"Thanks to ",(0,n.kt)("a",{parentName:"p",href:"https://konvera.io"},"konVera")," for the great collaboration on this project, as well as to ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/mmrosum"},"Mateusz Morusiewicz")," and ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/tkstanczak"},"Tomasz K. Sta\u0144czak")," for the work towards making this happen.\nAlso thanks to ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/imkailin"},"Kailin Rutherford"),", Robert Annessi, ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/ObadiaAlex"},"Alexo"),", ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/bertcmiller"},"Bert")," and ",(0,n.kt)("a",{parentName:"p",href:"https://twitter.com/tzhen"},"Tina Z")," for reviewing drafts of this post."),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"You can find our code and tooling for running a builder inside SGX at ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine"},"github.com/flashbots/geth-sgx-gramine"),"."),(0,n.kt)("li",{parentName:"ul"},"See also the first post in the SGX series: ",(0,n.kt)("a",{parentName:"li",href:"https://writings.flashbots.net/geth-inside-sgx"},"Running Geth inside SGX"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/mev-boost/issues/139"},"On distributed block building")," (and exploring the builder design space, broadly) by Alex Stokes."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Join us in the forum to discuss and collaborate!")," ",(0,n.kt)("a",{parentName:"li",href:"https://collective.flashbots.net/t/block-building-inside-sgx/1373"},"collective.flashbots.net/t/block-building-inside-sgx/1373"))),(0,n.kt)("h2",{id:"updates"},"Updates"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"2023-03-14"),": We successfully run a mainnet SGX builder by separating the ancient database from the SGX state database."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"More details in the ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine/pull/10"},"pull-request: geth-sgx-gramine#10")),(0,n.kt)("li",{parentName:"ul"},"The SGX builder landed the first block on mainnet: ",(0,n.kt)("a",{parentName:"li",href:"https://etherscan.io/block/16813125"},"https://etherscan.io/block/16813125"))))}p.isMDXComponent=!0},8118:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/sgx-og-394762d1adb298eeb510c940cedfe678.jpg"}}]);