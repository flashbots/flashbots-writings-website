"use strict";(self.webpackChunkwrittings_website=self.webpackChunkwrittings_website||[]).push([[6738],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,m=c["".concat(l,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(m,o(o({ref:t},h),{},{components:n})):a.createElement(m,o({ref:t},h))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},403:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={slug:"geth-inside-sgx",title:"Running Geth within SGX: Our Experience, Learnings and Code",authors:["metachris","frieder"],tags:["privacy","sgx"],image:"/img/posts/sgx-og.jpg",hide_table_of_contents:!1,description:"We are happy to publish our efforts and a number of key learnings about running Geth inside SGX, for others to reuse, experiment with, and build upon."},o=void 0,s={permalink:"/geth-inside-sgx",source:"@site/content/2022-12-20-geth-in-sgx.mdx",title:"Running Geth within SGX: Our Experience, Learnings and Code",description:"We are happy to publish our efforts and a number of key learnings about running Geth inside SGX, for others to reuse, experiment with, and build upon.",date:"2022-12-20T00:00:00.000Z",formattedDate:"December 20, 2022",tags:[{label:"privacy",permalink:"/tags/privacy"},{label:"sgx",permalink:"/tags/sgx"}],readingTime:4.995,truncated:!0,authors:[{name:"Chris Hager",title:"Tech Lead @Flashbots",url:"https://twitter.com/metachris/",imageURL:"https://pbs.twimg.com/profile_images/1371171321426624514/x3Pr9XJd_400x400.jpg",key:"metachris"},{name:"Frieder Paape",url:"https://www.linkedin.com/in/friederpaape",key:"frieder"}],prevItem:{title:"Backrunning Private Transactions Using Multi-Party Computation",permalink:"/backrunning-private-txs-MPC"},nextItem:{title:"The Future of MEV is SUAVE",permalink:"/the-future-of-mev-is-suave"}},l={authorsImageUrls:[void 0,void 0]},p=[{value:"Working with SGX",id:"working-with-sgx",children:[]},{value:"Issues and Challenges",id:"issues-and-challenges",children:[{value:"Storing the State",id:"storing-the-state",children:[]},{value:"Initial Sync",id:"initial-sync",children:[]},{value:"Information Leakage",id:"information-leakage",children:[]}]},{value:"In-Memory Approach",id:"in-memory-approach",children:[]},{value:"Summary",id:"summary",children:[]},{value:"Future work",id:"future-work",children:[]},{value:"Thanks",id:"thanks",children:[]},{value:"References",id:"references",children:[]}],h={toc:p};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"At Flashbots, we are exploring trusted execution environments (TEEs) such as SGX, as well as other privacy technologies including Multi-Party Computation and Homomorphic Encryption, as important building blocks for trustless collaboration along the transaction supply chain. This is particularly relevant for applications such as decentralized block building and sharing private orderflow."),(0,i.kt)("p",null,"Today we are happy to publish our efforts and a number of key learnings about running Geth inside SGX, for others to reuse, experiment with, and build upon."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Suave Logo",src:n(8118).Z})),(0,i.kt)("p",null,"In collaboration with ",(0,i.kt)("a",{parentName:"p",href:"https://konvera.io"},"konVera"),", a software development company with strong expertise in confidential computing, we have achieved a fully working prototype of Geth running inside SGX and syncing with Ethereum mainnet."),(0,i.kt)("p",null,"You can find the code at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/flashbots/geth-sgx-gramine"},"https://github.com/flashbots/geth-sgx-gramine"),"."),(0,i.kt)("h2",{id:"working-with-sgx"},"Working with SGX"),(0,i.kt)("p",null,"Historically the idea of TEEs such as SGX was to isolate only a small critical part of your application within the confinements of an enclave. For this, it is necessary to adapt the code to make it SGX aware. Only later on did people want to use SGX and run existing applications in isolation and do so without modification of the source code."),(0,i.kt)("p",null,"For this, libOSes such as ",(0,i.kt)("a",{parentName:"p",href:"https://gramineproject.io/"},"Gramine"),",  ",(0,i.kt)("a",{parentName:"p",href:"https://occlum.io/"},"Occlum")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/edgelesssys/ego"},"EGo")," have been developed, to provide an abstraction layer to applications which expect to be run in Linux-like environments. We chose Gramine because it is the most mature and stable, and is well documented."),(0,i.kt)("h2",{id:"issues-and-challenges"},"Issues and Challenges"),(0,i.kt)("p",null,"As we began this process, we encountered several challenges and issues that we had to address."),(0,i.kt)("h3",{id:"storing-the-state"},"Storing the State"),(0,i.kt)("p",null,"One major problem we faced was the slow performance of Gramine\u2019s encrypted file mounts, which made it difficult for Geth to keep up with Ethereum mainnet. This is likely a bug and should be investigated at some point."),(0,i.kt)("p",null,"To address this, we experimented with using different libOS frameworks, but ultimately found that these alternatives were not suitable for our needs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Occlum: performance was promising but it was highly unstable and we couldn\u2019t get Geth running with encrypted state (many syscalls missing, unstable, lack of documentation)."),(0,i.kt)("li",{parentName:"ul"},"EGo: easy to setup, but much slower than Gramine and did not support encrypted files at all.")),(0,i.kt)("h3",{id:"initial-sync"},"Initial Sync"),(0,i.kt)("p",null,"The initial sync process of the chain can take quite a long time, and currently requires up to 800GB of storage."),(0,i.kt)("p",null,"We chose to copy the unencrypted database from the host into SGX, rather than run the sync within SGX. Copying the database on startup\nalso encrypts the data, which takes about 3 hours because of the data size and cryptographic operations."),(0,i.kt)("h3",{id:"information-leakage"},"Information Leakage"),(0,i.kt)("p",null,"Another issue we explored was the problem of information leakage, which occurs when the host system can extract information about what data is being accessed within the SGX enclave. In the case of Geth, this could potentially leak information about the keys being accessed from the database due to IO and memory access patterns."),(0,i.kt)("p",null,"This research paper explores the issue of IO leakage in more detail: \u201c",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"https://petsymposium.org/popets/2021/popets-2021-0002.pdf"},"SGX-MR: Regulating Dataflows for Protecting Access Patterns of Data-Intensive SGX Applications")),"\u201d (Alam, Sharma, Chen, 2021)"),(0,i.kt)("h2",{id:"in-memory-approach"},"In-Memory Approach"),(0,i.kt)("p",null,"In light of these challenges, we decided to try a different approach: storing the entire Geth database in memory and using encrypted swap space to make the approach less resource intensive."),(0,i.kt)("p",null,"To store the entire chain in-memory, we would need a system with at least 1TB of memory, which is hardware resource intensive and expensive. Another downside of this approach is that there is no persistence, and the state is lost if the Geth application stops."),(0,i.kt)("p",null,"Luckily, not all of the 1TB need to be accessed by the application at once, a lot of it can be encrypted by the SGX kernel driver and swapped out."),(0,i.kt)("p",null,"Our initial attempt was to run geth on a 384GB machine with 256GB EPC (SGX protected) memory and 1TB swap, and it worked well (~150 mgasps ","[million gas per second]","). But those machines are costly and hard to come by (Azure only)."),(0,i.kt)("p",null,"We found a trick though: you can use a server with large regular memory and treat it as buffer space. We ended up running on a machine with 500 GBs RAM, 1TB of SSD swap and 64 GBs of protected memory, which are much cheaper and more widely available. It performed at around 130 mgasps which is good enough."),(0,i.kt)("p",null,"While this approach does have some limitations, we have found it to be a viable option for running Geth within SGX."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Running Geth within SGX is entirely possible, but both a resource- and time-consuming process. It needs a large amount of memory, has a startup time of around 3 hours, and state is easily lost."),(0,i.kt)("p",null,"While storing the database in memory and using encrypted swap space provides good performance, it may still be vulnerable to certain types of information leakage. On the other hand, using encrypted file systems within SGX may be the straight forward, less resource intensive way, but it can introduce performance issues and information leakage is even harder to avoid."),(0,i.kt)("p",null,"Ultimately, it is important to carefully assess the needs of your specific application and choose the solution that best meets those needs."),(0,i.kt)("p",null,"By publishing our code and learnings, we hope to provide a reference implementation and to stimulate broader exploration and collaboration!"),(0,i.kt)("h2",{id:"future-work"},"Future work"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reproducible builds (enable trust into which code is running in SGX)"),(0,i.kt)("li",{parentName:"ul"},"Add\xa0",(0,i.kt)("inlineCode",{parentName:"li"},"flock"),"\xa0system call to Gramine"),(0,i.kt)("li",{parentName:"ul"},"Explore slowness of Gramine encrypted FS mounts"),(0,i.kt)("li",{parentName:"ul"},"Explore possible IO leakage and implications"),(0,i.kt)("li",{parentName:"ul"},"Verify attestations on-chain")),(0,i.kt)("h2",{id:"thanks"},"Thanks"),(0,i.kt)("p",null,"Special shoutout to ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/mmrosum"},"Mateusz Morusiewicz")," and ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/tkstanczak"},"Tomasz K. Sta\u0144czak")," for their support and creativity in making this happen and solving a bunch of problems along the way,\nas well as to ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/fiiiu_"},"Alejo Salles"),", Jonathan Passerat-Palmbach and ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/bertcmiller"},"Robert Miller")," for reviewing the draft of this post."),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can find our code for running Geth inside SGX at ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/flashbots/geth-sgx-gramine"},"github.com/flashbots/geth-sgx-gramine")),(0,i.kt)("li",{parentName:"ul"},"Join us in the forum, to discuss and collaborate, at ",(0,i.kt)("a",{parentName:"li",href:"https://collective.flashbots.net/t/running-geth-within-sgx-our-experience-learnings-and-code-flashbots/938"},"https://collective.flashbots.net/t/running-geth-within-sgx-our-experience-learnings-and-code-flashbots/938")),(0,i.kt)("li",{parentName:"ul"},"See also the second post in this series: ",(0,i.kt)("a",{parentName:"li",href:"https://writings.flashbots.net/block-building-inside-sgx"},"Block Building inside SGX"))))}c.isMDXComponent=!0},8118:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/sgx-og-394762d1adb298eeb510c940cedfe678.jpg"}}]);